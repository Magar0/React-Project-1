[{"C:\\Users\\rakes\\OneDrive\\Desktop\\Coding\\Project\\Project React\\thapa-react-practice\\src\\index.js":"1","C:\\Users\\rakes\\OneDrive\\Desktop\\Coding\\Project\\Project React\\thapa-react-practice\\src\\App.js":"2","C:\\Users\\rakes\\OneDrive\\Desktop\\Coding\\Project\\Project React\\thapa-react-practice\\src\\component\\Project 1 (Food-Menu)\\restaurant.js":"3","C:\\Users\\rakes\\OneDrive\\Desktop\\Coding\\Project\\Project React\\thapa-react-practice\\src\\component\\Project 2 (ToDo)\\ToDo.js":"4","C:\\Users\\rakes\\OneDrive\\Desktop\\Coding\\Project\\Project React\\thapa-react-practice\\src\\component\\Project 1 (Food-Menu)\\menuApi.js":"5","C:\\Users\\rakes\\OneDrive\\Desktop\\Coding\\Project\\Project React\\thapa-react-practice\\src\\component\\Project 1 (Food-Menu)\\Navbar.js":"6","C:\\Users\\rakes\\OneDrive\\Desktop\\Coding\\Project\\Project React\\thapa-react-practice\\src\\component\\Project 1 (Food-Menu)\\MenuCard.js":"7","C:\\Users\\rakes\\OneDrive\\Desktop\\Coding\\Project\\Project React\\thapa-react-practice\\src\\component\\Project 3 (WeatherAPI)\\Temp.js":"8","C:\\Users\\rakes\\OneDrive\\Desktop\\Coding\\Project\\Project React\\thapa-react-practice\\src\\component\\Project 3 (WeatherAPI)\\weatherCard.js":"9"},{"size":400,"mtime":1689435471931,"results":"10","hashOfConfig":"11"},{"size":274,"mtime":1690385092226,"results":"12","hashOfConfig":"11"},{"size":900,"mtime":1690378071186,"results":"13","hashOfConfig":"11"},{"size":3097,"mtime":1690164789919,"results":"14","hashOfConfig":"11"},{"size":3944,"mtime":1689528496164,"results":"15","hashOfConfig":"11"},{"size":359,"mtime":1689572357643,"results":"16","hashOfConfig":"11"},{"size":1259,"mtime":1689583914763,"results":"17","hashOfConfig":"11"},{"size":1745,"mtime":1690393596464,"results":"18","hashOfConfig":"11"},{"size":2628,"mtime":1690384957703,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"1biu6w0",{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"23"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"23"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"23"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"23"},"C:\\Users\\rakes\\OneDrive\\Desktop\\Coding\\Project\\Project React\\thapa-react-practice\\src\\index.js",[],[],[],"C:\\Users\\rakes\\OneDrive\\Desktop\\Coding\\Project\\Project React\\thapa-react-practice\\src\\App.js",["53","54"],[],"import React from 'react'\nimport Restaurant from './component/Project 1 (Food-Menu)/restaurant';\nimport ToDo from './component/Project 2 (ToDo)/ToDo';\nimport Temp from './component/Project 3 (WeatherAPI)/Temp';\n\n\nconst App = () => {\n  return <Temp/>;\n};\n\nexport default App;","C:\\Users\\rakes\\OneDrive\\Desktop\\Coding\\Project\\Project React\\thapa-react-practice\\src\\component\\Project 1 (Food-Menu)\\restaurant.js",["55"],[],"import React, { useState } from 'react';\r\nimport \"./style.css\";\r\nimport Menu from \"./menuApi.js\";\r\nimport MenuCard from \"./MenuCard\";\r\nimport Navbar from './Navbar';\r\n\r\nconst uniqueList = [...new Set(Menu.map(curElem => curElem.category)),\"All\"];\r\n\r\nconsole.log(uniqueList);\r\n\r\n\r\nconst Restaurant = () => {\r\n\r\n  const [menuData, setMenuData] = useState(Menu);\r\nconst [menuList,setMenuList]= useState(uniqueList)\r\n\r\n  const filterItem = (category) => {\r\n\r\n    if (category===\"All\"){\r\n      setMenuData(Menu);\r\n      return\r\n    }\r\n\r\n    const updatedList = Menu.filter((curElem) => {\r\n      return curElem.category === category;\r\n    });\r\n    setMenuData(updatedList);\r\n  }\r\n\r\n  return (\r\n    <>\r\n    <div className=\"main-box-restaurant\">\r\n      <Navbar filterItem={filterItem} menuList={menuList}/>\r\n      <MenuCard menuDatas={menuData} />\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Restaurant;","C:\\Users\\rakes\\OneDrive\\Desktop\\Coding\\Project\\Project React\\thapa-react-practice\\src\\component\\Project 2 (ToDo)\\ToDo.js",[],[],"C:\\Users\\rakes\\OneDrive\\Desktop\\Coding\\Project\\Project React\\thapa-react-practice\\src\\component\\Project 1 (Food-Menu)\\menuApi.js",[],[],"C:\\Users\\rakes\\OneDrive\\Desktop\\Coding\\Project\\Project React\\thapa-react-practice\\src\\component\\Project 1 (Food-Menu)\\Navbar.js",[],[],"C:\\Users\\rakes\\OneDrive\\Desktop\\Coding\\Project\\Project React\\thapa-react-practice\\src\\component\\Project 1 (Food-Menu)\\MenuCard.js",["56","57"],[],"import React from 'react';\r\n\r\nconst MenuCard = ({ menuDatas }) => {\r\n    return (\r\n        <>\r\n            <section className=' main-card-container'>\r\n                {\r\n                    menuDatas.map((curElem) => {\r\n                        const { id, category, name, description, image, price } = curElem;\r\n\r\n                        return (\r\n                            <>\r\n                                <div className='card' key={id}>\r\n                                    <span className='card-number subtle'>{id}</span>\r\n                                    <span className='card-category subtle'>{category}</span>\r\n                                    <h2 className='card-title'>{name}</h2>\r\n                                    <span className='card-description subtle'>{description}</span>\r\n                                    <div className='card-read'>Read More</div>\r\n                                    <img src={image} alt=\"image\" />\r\n                                    <span className='card-btn subtle'>Order Now</span>\r\n\r\n                                </div>\r\n                            </>\r\n                        )\r\n\r\n                    })\r\n                }\r\n            </section>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default MenuCard","C:\\Users\\rakes\\OneDrive\\Desktop\\Coding\\Project\\Project React\\thapa-react-practice\\src\\component\\Project 3 (WeatherAPI)\\Temp.js",["58","59"],[],"import React, { useState, useEffect } from 'react';\r\nimport './style.css';\r\nimport WeatherCard from './weatherCard';\r\n\r\nconst Temp = () => {\r\n\r\n  const [searchValue, setSearchValue] = useState(\"jorhat\");\r\n  const [tempInfo, setTempInfo] = useState({})\r\n\r\n  const getWeather = async () => {\r\n    try {\r\n      let url = `https://api.openweathermap.org/data/2.5/weather?q=${searchValue}&units=metric&appid=479a7b690583815022ddc7c7a046ce0a`;\r\n\r\n      let res = await fetch(url);\r\n      let data = await res.json();\r\n\r\n      const { temp, humidity, pressure } = data.main;\r\n      const { main: weatherMood } = data.weather[0]\r\n      const { name } = data\r\n      const { speed } = data.wind\r\n      const { country, sunset } = data.sys\r\n\r\n      const myNewWeatherInfo = {\r\n        temp, humidity, pressure, weatherMood, name, speed, country, sunset\r\n      };\r\n\r\n      setTempInfo(myNewWeatherInfo);\r\n      document.getElementById(\"error\").textContent = \"\"\r\n    }\r\n\r\n    catch (error) {\r\n      document.getElementById(\"error\").textContent = \"Type the place correctly\"\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getWeather()\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n    <div className=\"main-box-weather\">\r\n      <div> <h2>Thapa Weather Forecast</h2></div>\r\n      <div className=\"search\">\r\n        <input type=\"search\" placeholder='search...' autoFocus id='search' className='searchTerm' value={searchValue} onChange={(e) => setSearchValue(e.target.value)} />\r\n\r\n        <button className='searchBtn' onClick={getWeather}>Search</button>\r\n      </div>\r\n      <div className=\"error\"><h5 id='error'></h5></div>\r\n\r\n      {/* temp card */}\r\n     \r\n     < WeatherCard tempInfo={tempInfo}/>\r\n     </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Temp","C:\\Users\\rakes\\OneDrive\\Desktop\\Coding\\Project\\Project React\\thapa-react-practice\\src\\component\\Project 3 (WeatherAPI)\\weatherCard.js",["60"],[],"import React, { useEffect, useState } from 'react'\r\n\r\nconst WeatherCard = ({ tempInfo }) => {\r\n\r\n  const [weatherState, setWeatherState] = useState(\"\")\r\n\r\n  const {\r\n    temp, humidity, pressure, weatherMood, name, speed, country, sunset\r\n  } = tempInfo;\r\n\r\n  useEffect(() => {\r\n    if (weatherMood) {\r\n      switch (weatherMood) {\r\n        case \"Clouds\":\r\n          setWeatherState('wi-day-cloudy');\r\n          break;\r\n        case \"Haze\":\r\n          setWeatherState('wi-fog');\r\n          break;\r\n        case \"Clear\":\r\n          setWeatherState('wi-day-sunny');\r\n          break;\r\n        case \"Rain\":\r\n          setWeatherState('wi-day-rain');\r\n          break;\r\n\r\n\r\n        default:\r\n          setWeatherState('wi-day-sunny');\r\n          break;\r\n      }\r\n\r\n    }\r\n  })\r\n\r\n  // converting sec to time\r\n  let sec = sunset;\r\n  let date = new Date(sec * 1000);\r\n  let time = `${date.getHours()} : ${date.getMinutes()}`;\r\n\r\n  return (\r\n    <>\r\n      <article className='widget'>\r\n        <div className=\"weatherIcon\">\r\n          <i className={`wi ${weatherState}`}></i>\r\n        </div>\r\n        <div className=\"weather\">\r\n          <div className=\"weatherInfo\">\r\n            <div className=\"temperature\">\r\n              <span>{temp} &deg;</span>\r\n            </div>\r\n            <div className=\"description\">\r\n              <div className=\"weatherCondition\">{weatherMood}</div>\r\n              <div className=\"place\">{name}, {country}</div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className='date'>{new Date().toLocaleString(\"en-US\")}</div>\r\n        </div>\r\n        {/* bottom 4 section  */}\r\n        <div className=\"extra-temp\">\r\n          <div className=\"two-sided-section\">\r\n            <p>\r\n              <i className='wi wi-sunset'></i>\r\n            </p>\r\n            <p className=\"extra-info-leftside\">{time} <br />Sunset</p>\r\n          </div>\r\n\r\n          <div className=\"two-sided-section\">\r\n            <p>\r\n              <i className='wi wi-humidity'></i>\r\n            </p>\r\n            <p className=\"extra-info-leftside\">{humidity} <br />Humidity</p>\r\n          </div>\r\n\r\n          <div className=\"two-sided-section\">\r\n            <p>\r\n              <i className='wi wi-rain'></i>\r\n            </p>\r\n            <p className=\"extra-info-leftside\">{pressure} <br />Pressure</p>\r\n          </div>\r\n\r\n          <div className=\"two-sided-section\">\r\n            <p>\r\n              <i className='wi wi-strong-wind'></i>\r\n            </p>\r\n            <p className=\"extra-info-leftside\">{speed} <br />Speed</p>\r\n          </div>\r\n        </div>\r\n      </article>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default WeatherCard;",{"ruleId":"61","severity":1,"message":"62","line":2,"column":8,"nodeType":"63","messageId":"64","endLine":2,"endColumn":18},{"ruleId":"61","severity":1,"message":"65","line":3,"column":8,"nodeType":"63","messageId":"64","endLine":3,"endColumn":12},{"ruleId":"61","severity":1,"message":"66","line":15,"column":17,"nodeType":"63","messageId":"64","endLine":15,"endColumn":28},{"ruleId":"61","severity":1,"message":"67","line":9,"column":73,"nodeType":"63","messageId":"64","endLine":9,"endColumn":78},{"ruleId":"68","severity":1,"message":"69","line":19,"column":37,"nodeType":"70","endLine":19,"endColumn":68},{"ruleId":"71","severity":1,"message":"72","line":39,"column":6,"nodeType":"73","endLine":39,"endColumn":8,"suggestions":"74"},{"ruleId":"75","severity":1,"message":"76","line":50,"column":30,"nodeType":"70","endLine":50,"endColumn":45},{"ruleId":"71","severity":1,"message":"77","line":11,"column":3,"nodeType":"63","endLine":11,"endColumn":12,"suggestions":"78"},"no-unused-vars","'Restaurant' is defined but never used.","Identifier","unusedVar","'ToDo' is defined but never used.","'setMenuList' is assigned a value but never used.","'price' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getWeather'. Either include it or remove the dependency array.","ArrayExpression",["79"],"jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","React Hook useEffect contains a call to 'setWeatherState'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [weatherMood] as a second argument to the useEffect Hook.",["80"],{"desc":"81","fix":"82"},{"desc":"83","fix":"84"},"Update the dependencies array to be: [getWeather]",{"range":"85","text":"86"},"Add dependencies array: [weatherMood]",{"range":"87","text":"88"},[1147,1149],"[getWeather]",[771,771],", [weatherMood]"]